# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T09:37:00+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, APIKeyQuery, BaseSecurity

from models import (
    CompetitionDetail,
    FieldFormatActiveMembershipsGetResponse,
    FieldFormatAreasGetResponse,
    FieldFormatCompetitionsGetResponse,
    FieldFormatGamesByDateDateGetResponse,
    FieldFormatHistoricalMembershipsByTeamTeamidGetResponse,
    FieldFormatHistoricalMembershipsGetResponse,
    FieldFormatMembershipsByTeamTeamidGetResponse,
    FieldFormatPlayersByTeamTeamidGetResponse,
    FieldFormatPlayersGetResponse,
    FieldFormatScheduleRoundidGetResponse,
    FieldFormatSeasonTeamsSeasonidGetResponse,
    FieldFormatStandingsRoundidGetResponse,
    FieldFormatTeamsGetResponse,
    FieldFormatVenuesGetResponse,
    Format,
    Player,
)

app = MCPProxy(
    contact={'x-twitter': 'nfldata'},
    description='LoL v3 Scores',
    title='LoL v3 Scores',
    version='1.0',
    servers=[
        {'url': 'http://azure-api.sportsdata.io/v3/lol/scores'},
        {'url': 'https://azure-api.sportsdata.io/v3/lol/scores'},
    ],
)


@app.get(
    '/{format}/ActiveMemberships',
    description=""" Memberships (Active) """,
    tags=['membership_records'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def memberships_active(format: Format = 'xml'):
    """
    Memberships (Active)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Areas',
    description=""" Areas (Countries) """,
    tags=['venue_information'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def areas_countries(format: Format = 'xml'):
    """
    Areas (Countries)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/CompetitionDetails/{competitionid}',
    description=""" Competition Fixtures (League Details) """,
    tags=['competition_details', 'game_time_management'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def competition_fixtures_league_details(
    format: Format = 'xml', competitionid: str = ...
):
    """
    Competition Fixtures (League Details)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Competitions',
    description=""" Competitions (Leagues) """,
    tags=['competition_details'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def competitions_leagues(format: Format = 'xml'):
    """
    Competitions (Leagues)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/GamesByDate/{date}',
    description=""" Games by Date """,
    tags=['game_time_management', 'competition_details'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def games_by_date(format: Format = 'xml', date: str = ...):
    """
    Games by Date
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/HistoricalMemberships',
    description=""" Memberships (Historical) """,
    tags=['membership_records'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def memberships_historical(format: Format = 'xml'):
    """
    Memberships (Historical)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/HistoricalMembershipsByTeam/{teamid}',
    description=""" Memberships by Team (Historical) """,
    tags=['membership_records'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def memberships_by_team_historical(format: Format = 'xml', teamid: str = ...):
    """
    Memberships by Team (Historical)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/MembershipsByTeam/{teamid}',
    description=""" Memberships by Team (Active) """,
    tags=['membership_records'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def memberships_by_team_active(format: Format = 'xml', teamid: str = ...):
    """
    Memberships by Team (Active)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Player/{playerid}',
    description=""" Player """,
    tags=['player_information'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def player(format: Format = 'xml', playerid: str = ...):
    """
    Player
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Players',
    description=""" Players """,
    tags=['player_information'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def players(format: Format = 'xml'):
    """
    Players
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/PlayersByTeam/{teamid}',
    description=""" Players by Team """,
    tags=['membership_records', 'player_information', 'team_statistics'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def players_by_team(format: Format = 'xml', teamid: str = ...):
    """
    Players by Team
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Schedule/{roundid}',
    description=""" Schedule """,
    tags=['competition_details', 'game_time_management'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def schedule(format: Format = 'xml', roundid: str = ...):
    """
    Schedule
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/SeasonTeams/{seasonid}',
    description=""" Season Teams """,
    tags=['team_statistics', 'competition_details'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def season_teams(format: Format = 'xml', seasonid: str = ...):
    """
    Season Teams
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Standings/{roundid}',
    description=""" Standings """,
    tags=['competition_details', 'team_statistics'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def standings(format: Format = 'xml', roundid: str = ...):
    """
    Standings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Teams',
    description=""" Teams """,
    tags=['membership_records', 'team_statistics'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def teams(format: Format = 'xml'):
    """
    Teams
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/Venues',
    description=""" Venues """,
    tags=['venue_information'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def venues(format: Format = 'xml'):
    """
    Venues
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
